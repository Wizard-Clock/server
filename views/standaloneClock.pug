doctype html
html
    head
        title Wizarding Clock - #{title}
        link(rel="preconnect" href="https://fonts.googleapis.com")
        link(rel="preconnect" href="https://fonts.gstatic.com" crossorigin)
        link(rel='stylesheet', href='/public/stylesheets/style.css')
        link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js')
        link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css')
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css")
        link(rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Aboreto&family=Xanh+Mono&display=swap")
        link(rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="")
        script(src = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin="")
        script(src="https://cdn.jsdelivr.net/npm/motion@latest/dist/motion.js")
        script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js")
        script(src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js")
        style.
            html, body {
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
                border: 0;
                background-image: url(/public/images/orange_wood.jpg);
                background-repeat: repeat;
                overflow: hidden;
                /*  Disable scrollbars */
                display: block;
                /* No floating content on sides */
            }
    body(style="")
        div(class="d-flex justify-content-center align-items-center" id="clockDiv")
            canvas(id="wizardingClockFace" class="img-fluid" width="871" height="846")

    script.
        const {cubicBezier} = Motion;
        const canvas = document.getElementById('wizardingClockFace');
        let canvasDim = calculateAspectRatioFit(871, 846, window.innerWidth, window.innerHeight);
        canvas.width = canvasDim.width;
        canvas.height = canvasDim.height;
        const ctx = canvas.getContext('2d');
        let clockPositions = JSON.parse('!{JSON.stringify(clockPositions)}');
        let wizardWithPositionArray = JSON.parse('!{JSON.stringify(usersClockPosition)}');
        const currentWizardState = [];
        const targetWizardState = [];
        let firstUpdate = true;

        const clockFace = new Image();
        clockFace.crossOrigin = 'anonymous';
        clockFace.src = '/public/images/wizarding-clock-face.jpg';
        clockFace.alt = "Wizarding Clock Face";

        const scissorObj = new Image();
        scissorObj.src = '/public/images/half-scissor-outline.png';
        scissorObj.alt = "Clock Hand";
        const scissorEasing = cubicBezier(.33, -0.24, .56, 1.07);

        const compareArrays = (a, b) => {
            return JSON.stringify(a) === JSON.stringify(b);
        };

        window.requestAnimationFrame(drawClock);

        async function drawClock() {
            // Add image to Canvas
            await refreshWizardData();
            ctx.resetTransform();
            ctx.clearRect(0, 0, canvasDim.width, canvasDim.height);
            ctx.drawImage(clockFace, 0, 0, canvasDim.width, canvasDim.height);
            ctx.translate(canvasDim.width / 2, canvasDim.height / 2);
            await drawNumbers(ctx, (canvasDim.height) / 2, clockPositions);
            await drawTime(ctx, (canvasDim.height) / 2, clockPositions, wizardWithPositionArray);
            window.requestAnimationFrame(drawClock);
        }


        async function refreshWizardData() {
            let updateOccurred = false;
            // Get the current data
            let response = await fetch('/clock/updateToClock', {
                method: 'GET'
            });
            let updatedData = await response.json();

            // Check against the current data
            if (!compareArrays(updatedData.clockPositions, clockPositions)) {
                clockPositions = updatedData.clockPositions;
                updateOccurred = true;
            }
            if (!compareArrays(updatedData.usersClockPositions, wizardWithPositionArray)) {
                wizardWithPositionArray = updatedData.usersClockPositions;
                updateOccurred = true;
            }

            if (updateOccurred || firstUpdate) {
                firstUpdate = false;

                // Update Wizard Info
                targetWizardState.length = 0;
                for (let num = 0; num < wizardWithPositionArray.length; num++) {
                    const wizardClockPosition = wizardWithPositionArray[num];
                    const wizardOffset = ((num - ((wizardWithPositionArray.length - 1) / 2)) / wizardWithPositionArray.length * 0.6);
                    let location = wizardOffset;
                    for (let loc of clockPositions) {
                        if (loc.name === wizardClockPosition.position.name) {
                            location = wizardOffset + loc.face_position;
                        }
                    }
                    location = (2 * Math.PI / clockPositions.length) * (location + .2);

                    targetWizardState.push({
                        wizard: wizardWithPositionArray[num].name,
                        pos: location,
                        length: (canvas.height / 2) * 0.7,
                        width: (canvas.height / 2) * 0.05,
                    });
                }
            }
        }

        // Much help from https://github.com/malcolmrigg/wizard-clock-card/tree/master
        async function drawNumbers(ctx, radius, positions) {
            let selectedFont = 'Xanh Mono';
            ctx.textBaseline = "middle";
            ctx.textAlign = "center";
            ctx.fillStyle = 'black';

            // Have to compensate for the clock not being a true circle
            const startingAdjustArray = [0.81, 0.82, 0.76, 0.76, 0.74, 0.74, 0.73, 0.73, 0.75, 0.73, 0.71, 0.71, .79];
            const ovalCompensateArray = [0, 5, 10, 10, 7, 3, 0, 3, 7, 6, 4, -2, -3];

            for (let num = 0; num < positions.length; num++) {
                // Unfun Required Math
                const positionTranslateArray = [-99, -75, -68, -72, -83, -98, -110, -122, -132, -140, -146, -148];
                const positionRotateArray = [-55, -30, -5, 20, 35, 40, 38, 38, 38, 28, 17, 10];
                const fontScaleArray = [0.9, 0.8, 0.7, 0.6, 0.6, 0.55, 0.55, 0.5, 0.5, 0.45, 0.4, 0.35];
                const charWidthArray = [3.8, 4, 3.9, 3.5, 2.8, 2.5, 2.5, 2.5, 2.8, 2.8, 2.8];

                ctx.resetTransform();
                ctx.translate(canvasDim.width / 2, canvasDim.height / 2);
                let ang = (2 * Math.PI / positions.length) * (num + startingAdjustArray[num]);
                ctx.rotate(ang);

                // Now draw, rotate, reset, and repeat
                let text = positions[num].name.toUpperCase();
                for (let j = 0; j < text.length; j++) {
                    ctx.font = "bold " + radius * 0.15 * fontScaleArray[j] + "px " + selectedFont;

                    // From Center to Edge
                    ctx.translate(0, (0 - (radius + ovalCompensateArray[num] * canvasDim.ratio + positionTranslateArray[j]* canvasDim.ratio)));
                    // Rotate to letter position
                    ctx.rotate(positionRotateArray[j] * Math.PI / 180);

                    ctx.fillText(text[j], 0, 0);

                    // Rotate back to straight
                    ctx.rotate(-positionRotateArray[j] * Math.PI / 180);
                    // From Edge to Center
                    ctx.translate(0, -(0 - (radius + ovalCompensateArray[num]* canvasDim.ratio + positionTranslateArray[j]* canvasDim.ratio)));

                    ctx.rotate((charWidthArray[j]) * Math.PI / 180);
                }

            }
        }

        async function drawTime(ctx, radius) {
            ctx.resetTransform();
            ctx.translate(canvas.width / 2, canvas.height / 2);

            if (currentWizardState.length === 0) {
                // Math for current wizard state creation
                for (let num = 0; num < wizardWithPositionArray.length; num++) {
                    const wizardOffset = ((num - ((wizardWithPositionArray.length - 1) / 2)) / wizardWithPositionArray.length * 0.6);
                    let location = (2 * Math.PI / clockPositions.length) * (wizardOffset + .2);

                    currentWizardState.push({
                        wizard: wizardWithPositionArray[num].name,
                        radToTravel: 0,
                        pos: location,
                        movingPos: location,
                        length: radius * 0.7,
                        width: radius * 0.05,
                    });

                }
            } else {
                // Math for incrementing wizard state
                for (let wizardCurrState of currentWizardState) {
                    for (let wizardTarget of targetWizardState) {
                        if (wizardCurrState.wizard === wizardTarget.wizard) {
                            if (wizardCurrState.pos !== wizardTarget.pos) {
                                // Initialize Pos Movement
                                if (wizardCurrState.radToTravel === 0) {
                                    // Fix any backwards movement
                                    let disToMove = wizardTarget.pos - wizardCurrState.pos;
                                    wizardCurrState.radToTravel = disToMove > 0 ? disToMove : disToMove + (2 * Math.PI);
                                    wizardCurrState.startTime = Date.now();
                                }

                                if (Date.now() - wizardCurrState.startTime <= 5000) {
                                    let easingRate = scissorEasing((Date.now() - wizardCurrState.startTime) / 5000);
                                    wizardCurrState.movingPos = wizardCurrState.pos + (wizardCurrState.radToTravel * easingRate);
                                } else {
                                    wizardCurrState.pos = wizardTarget.pos;
                                    wizardCurrState.movingPos = wizardTarget.pos;
                                }
                            } else {
                                wizardCurrState.radToTravel = 0;
                                wizardCurrState.startTime = 0;
                            }

                        }
                    }
                }
            }

            // draw currentState
            for (let wizardState of currentWizardState) {
                this.drawHand(ctx, wizardState.movingPos, wizardState.length, wizardState.width, wizardState.wizard);
            }
        }

        function drawHand(ctx, pos, length, width, wizard) {
            let fontScale = 0.3;
            let selectedFont = 'Aboreto';
            scissorObj.id = wizard + "-clock-hand";
            ctx.rotate(pos);
            ctx.drawImage(scissorObj, -20* canvasDim.ratio, -300* canvasDim.ratio, 75* canvasDim.ratio, 450* canvasDim.ratio);

            ctx.font = "bolder " + width * 3 * fontScale + "px " + selectedFont;
            ctx.fillStyle = "white";
            ctx.translate(0, -length / 2);
            ctx.rotate(Math.PI / 2)
            if (pos < Math.PI && pos >= 0) {
                ctx.rotate(Math.PI);
            }
            ctx.fillText(wizard.toUpperCase(), 0, 0);
            if (pos < Math.PI && pos >= 0) {
                ctx.rotate(-Math.PI);
            }
            ctx.rotate(-Math.PI / 2);
            ctx.translate(0, length / 2);

            ctx.rotate(-pos);
        }

        /**
         * Conserve aspect ratio of the original region. Useful when shrinking/enlarging
         * images to fit into a certain area.
         * source: https://stackoverflow.com/a/14731922
         *
         * @param {Number} srcWidth width of source image
         * @param {Number} srcHeight height of source image
         * @param {Number} maxWidth maximum available width
         * @param {Number} maxHeight maximum available height
         * @return {Object} { width, height }
         */
        function calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {
            let ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
            return {width: srcWidth * ratio, height: srcHeight * ratio, ratio: ratio};
        }