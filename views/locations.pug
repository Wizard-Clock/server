extends layout

block content
    div(class="row justify-content-center")
        div(class="col-auto w-75")
            div()
                h1(class="pb-2 mb-4 border-bottom") Location Management
                div()
                    p() Location logitude, latitude, and radius can be found using this <a href="https://www.freemaptools.com/radius-around-point.htm" target="_blank" rel="noopener noreferrer">helpful tool</a>.
                table(class="table table-striped table-hover")
                    thead()
                        tr()
                            th(scope="col") ID
                            th(scope="col") Clock Position
                            th(scope="col") Name
                            th(scope="col") Latitude
                            th(scope="col") Longitude
                            th(scope="col") Radius (m)
                            th(scope="col") Description
                            th(scope="col") Edit
                            th(scope="col") Delete
                            th(scope="col") Navigate To
                    tbody()
                         each location in locations
                             tr()
                                 th(scope="row" id="location-id")= location.id
                                 if location.clockPosition
                                    td()= location.clockPosition
                                 else
                                    td() NA
                                 td()= location.name
                                 td()= location.latitude
                                 td()= location.longitude
                                 td()= location.radius
                                 td()= location.description
                                 td()
                                     button(type="button" class="btn btn-light" data-bs-toggle="modal" data-bs-target="#editLocationModal" data-bs-location= location)
                                         i(class="bi bi-pencil-square")
                                 td()
                                     button(type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteLocationModal" data-bs-location-id= location.id data-bs-location-name= location.name)
                                         i(class="bi bi-trash3-fill")
                                 td()
                                     button(type="button" class="btn btn-primary"  onclick="previewLocation()" data-bs-location= location)
                                         i(class="bi bi-eye-fill")
                button(type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addLocationModal") Add Location&nbsp;
                    i(class="bi bi-geo-alt")
            div()
                h1(class="pb-2 mb-4 border-bottom") Location Preview
                div(id="map")

            div(class="modal fade" id="deleteLocationModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="deleteLocationModalLabel" aria-hidden="true")
                div(class="modal-dialog modal-dialog-centered")
                    div(class="modal-content")
                        div(class="modal-header")
                            h1(class="modal-title fs-5" id="deleteLocationModalLabel") Confirm Delete Location
                            button(type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close")
                        div(class="modal-body")
                            p() Are you sure you want to delete this location?
                            p(class="location_name")
                            p(class="location_id")
                        div(class="modal-footer")
                            button(type="button" class="btn btn-secondary" data-bs-dismiss="modal") Cancel
                            button(type="button" class="btn btn-primary" onclick="deleteLocationAction()") Delete

            div(class="modal fade" id="editLocationModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="editLocationModalLabel" aria-hidden="true")
                div(class="modal-dialog modal-dialog-centered")
                    div(class="modal-content")
                        div(class="modal-header")
                            h1(class="modal-title fs-5" id="editLocationModalLabel") Edit Location
                            button(type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close")
                        div(class="modal-body")
                            form(class="row g-3" id="editLocationForm")
                                div(class="col-md-8")
                                    section()
                                        label(for="locationNameEditInput" class="form-label") Name
                                        input(type="text" class="form-control loc-name" name="name" id="locationNameEditInput" required)
                                div(class="col-md-4")
                                    section()
                                        label(for="clockPosSelectEditInput" class="form-label") Clock Position
                                        select(id="clockPosSelectEditInput" class="form-select clock-pos" name="clockPosition")
                                            option(selected value="") None
                                                for position in positions
                                                    if position.location_id
                                                    else
                                                        option()=position.position
                                div(class="col-md-4")
                                    section()
                                        label(for="latitudeEdit" class="form-label") Latitude&nbsp;
                                            i(class="bi bi-question-circle-fill" data-bs-toggle="tooltip" data-bs-title="Must be a valid number between -90 and 90, and 0.0 formatting should followed.")
                                        input(type="text" class="form-control loc-lat" name="latitude" id="latitudeEdit" pattern="^(\\+|-)?(?:90(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]{1,6})?))$" required)
                                div(class="col-md-4")
                                    section()
                                        label(for="longitudeEdit" class="form-label") Longitude&nbsp;
                                            i(class="bi bi-question-circle-fill" data-bs-toggle="tooltip" data-bs-title="Must be a valid number between -180 and 180, and 0.0 formatting should followed.")
                                        input(type="text" class="form-control loc-long" name="longitude" id="longitudeEdit" pattern="^(\\+|-)?(?:180(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]{1,6})?))$" required)
                                div(class="col-md-4")
                                    section()
                                        label(for="radiusEdit" class="form-label") Radius (m)
                                        input(type="number" min=0 class="form-control loc-rad" name="radius" id="radiusEdit" required)
                                div(class="col-md-12")
                                    section()
                                        label(for="descriptionEdit" class="form-label") Description
                                        textarea(class="form-control loc-desc" name="description" id="descriptionEdit")
                                div(class="col-12")
                                    button(type="submit" class="btn btn-primary") Save Changes
                        div(class="modal-footer")
                            button(type="button" class="btn btn-secondary" data-bs-dismiss="modal") Cancel

            div(class="modal fade" id="addLocationModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="addLocationModalLabel" aria-hidden="true")
                div(class="modal-dialog modal-dialog-centered")
                    div(class="modal-content")
                        div(class="modal-header")
                            h1(class="modal-title fs-5" id="addLocationModalLabel") Add Location
                            button(type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close")
                        div(class="modal-body")
                            form(class="row g-3" id="addLocationForm")
                                div(class="col-md-8")
                                    section()
                                        label(for="locationNameAddInput" class="form-label") Name
                                        input(type="text" class="form-control" name="name" id="locationNameInput" required)
                                div(class="col-md-4")
                                    section()
                                        label(for="clockPosSelectInput" class="form-label") Clock Position
                                        select(id="clockPosSelectInput" class="form-select" name="clockPosition")
                                            option(selected value="") None
                                            for position in positions
                                                if position.location_id
                                                else
                                                    option(value= position.position)=position.position
                                div(class="col-md-4")
                                    section()
                                        label(for="latitudeAdd" class="form-label") Latitude&nbsp;
                                            i(class="bi bi-question-circle-fill" data-bs-toggle="tooltip" data-bs-title="Must be a valid number between -90 and 90, and 0.0 formatting should followed.")
                                        input(type="text" class="form-control" name="latitude" id="latitudeAdd" pattern="^(\\+|-)?(?:90(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]{1,6})?))$" required)
                                div(class="col-md-4")
                                    section()
                                        label(for="longitudeAdd" class="form-label") Longitude&nbsp;
                                            i(class="bi bi-question-circle-fill" data-bs-toggle="tooltip" data-bs-title="Must be a valid number between -180 and 180, and 0.0 formatting should followed.")
                                        input(type="text" class="form-control" name="longitude" id="longitudeAdd" pattern="^(\\+|-)?(?:180(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]{1,6})?))$" required)
                                div(class="col-md-4")
                                    section()
                                        label(for="radiusAdd" class="form-label") Radius (m)
                                        input(type="number" min=0 class="form-control" name="radius" id="radiusAdd" required)
                                div(class="col-md-12")
                                    section()
                                        label(for="descriptionAdd" class="form-label") Description
                                        textarea(class="form-control" name="description" id="descriptionAdd")
                                div(class="col-12")
                                    button(type="submit" class="btn btn-primary") Add Location
                        div(class="modal-footer")
                            button(type="button" class="btn btn-secondary" data-bs-dismiss="modal") Cancel
            script.
                document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(tooltip => {
                    new bootstrap.Tooltip(tooltip);
                })

                var map = L.map('map').setView([41.737023, -99.587382], 5);
                L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
                }).addTo(map);

                let locations = JSON.parse('!{JSON.stringify(locations)}');
                for (let location of locations) {
                    L.circle([location.latitude, location.longitude], {
                        color: 'red',
                        fillColor: '#f03',
                        fillOpacity: 0.4,
                        radius: location.radius
                    }).addTo(map);
                    var marker = L.marker([location.latitude, location.longitude]).addTo(map);
                    marker.bindPopup(location.name).openPopup();

                }

                let deleteLocationModal = document.getElementById('deleteLocationModal');
                if (deleteLocationModal) {
                    deleteLocationModal.addEventListener('show.bs.modal', event => {
                        const button = event.relatedTarget;

                        const locName = button.getAttribute('data-bs-location-name');
                        const modalBodyUsername = deleteLocationModal.querySelector('.location_name');
                        modalBodyUsername.textContent = `Location: ${locName}`;

                        const locID = button.getAttribute('data-bs-location-id');
                        const modalBodyID = deleteLocationModal.querySelector('.location_id');
                        modalBodyID.textContent = `ID: ${locID}`;
                    });
                }

                async function deleteLocationAction() {
                    let deleteLocationModal = document.getElementById('deleteLocationModal');
                    if (deleteLocationModal) {
                        let idString = document.getElementById('deleteLocationModal').querySelector('.location_id').textContent;
                        idString = idString.slice(3).trim();
                        let response = await fetch('/locations/deleteLocation', {
                            method: 'POST',
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({id: idString})
                        });
                        let result = await response.json();
                        if (result.success) {
                            $('#deleteLocationModal').modal('hide');
                            window.location.reload();
                        } else {
                            alert("Deletion Error");
                        }
                    }
                }

                const editLocationModal = document.getElementById('editLocationModal');
                if (editLocationModal) {
                    editLocationModal.addEventListener('show.bs.modal', async event => {
                        document.getElementById('editLocationForm').reset();
                        const button = event.relatedTarget;
                        const location = JSON.parse(button.getAttribute('data-bs-location'));
                        editLocationModal.setAttribute("data-bs-location-id", location.id);
                        editLocationModal.querySelector('.loc-name').value = location.name;
                        editLocationModal.querySelector('.loc-lat').value = location.latitude;
                        editLocationModal.querySelector('.loc-long').value = location.longitude;
                        editLocationModal.querySelector('.loc-rad').value = location.radius;
                        editLocationModal.querySelector('.loc-desc').value = location.description;

                        let clock_pos_select = editLocationModal.querySelector('.clock-pos');
                        if (location.clockPosition) {
                            const options = Object.values(clock_pos_select.options).map(option => option.value);
                            if (!options.includes(location.clockPosition.toString())) {
                                clock_pos_select.add(new Option(location.clockPosition, location.clockPosition));
                                $("#clockPosSelectEditInput").html($('#clockPosSelectEditInput option').sort(function (x, y) {
                                    return parseInt($(x).text()) < parseInt($(y).text()) ? -1 : 1;
                                }));
                            }
                            clock_pos_select.value = location.clockPosition;
                        }
                    });
                }

                let editLocationForm = document.getElementById('editLocationForm');
                editLocationForm.onsubmit = async (e) => {
                    e.preventDefault();
                    let latReg = new RegExp('^(\\+|-)?(?:90(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]{1,6})?))$');
                    let longReg = new RegExp('^(\\+|-)?(?:180(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]{1,6})?))$');
                    let lat = document.getElementById('latitudeEdit').value;
                    let long = document.getElementById('longitudeEdit').value;
                    let rad = document.getElementById('radiusEdit').value;
                    if (!latReg.test(lat) || !longReg.test(long) || rad < 0) {
                        alert("Location values invalid.");
                        return;
                    }

                    let formData = new FormData(editLocationForm)
                    let locationID = editLocationModal.getAttribute("data-bs-location-id");
                    console.log(locationID);
                    formData.append("id",locationID);
                    console.log(formData);

                    let response = await fetch('/locations/editLocation', {
                        method: 'POST',
                        body: formData
                    });
                    let result = await response.json();
                    if (result.success) {
                        editLocationForm.reset();
                        window.location.reload();
                    } else {
                        alert("Submission Error");
                    }
                }

                let addLocationForm = document.getElementById('addLocationForm');
                addLocationForm.onsubmit = async (e) => {
                    e.preventDefault();
                    let latReg = new RegExp('^(\\+|-)?(?:90(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]{1,6})?))$');
                    let longReg = new RegExp('^(\\+|-)?(?:180(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]{1,6})?))$');
                    let lat = document.getElementById('latitudeAdd').value;
                    let long = document.getElementById('longitudeAdd').value;
                    let rad = document.getElementById('radiusAdd').value;
                    if (!latReg.test(lat) || !longReg.test(long) || rad < 0) {
                        alert("Location values invalid.");
                        return;
                    }

                    let response = await fetch('/locations/addLocation', {
                        method: 'POST',
                        body: new FormData(addLocationForm)
                    });
                    let result = await response.json();
                    if (result.success) {
                        addLocationForm.reset();
                        window.location.reload();
                    } else {
                        alert("Submission Error");
                    }
                }